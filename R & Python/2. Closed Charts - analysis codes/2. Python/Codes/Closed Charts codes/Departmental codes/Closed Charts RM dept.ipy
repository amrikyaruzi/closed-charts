# -*- coding: utf-8 -*-
"""
Created on Tue Apr  7 10:43:55 2020

@author: amri.kyaruzi
"""

%reset -f

#RM Departmental data:
import pandas as pd
data = pd.read_csv(r"C:/Users/amri.kyaruzi/Desktop/OME DETAILS OCT-NOV 2020.csv", engine='python')
print(data.head())

#RMFilters
is_RM = data['DEPT'] == 'RM'
is_SNN = (data['SNN'] == 1.4) | (data['SNN'] == 1.6) | (data['SNN'] == 1.7) | (data['SNN'] == 2.1) | (data['SNN'] == 3.1)

#RMdataset
mydata = data[is_RM & is_SNN]

#Filters
is_documented = (mydata['DOCUMENTED'] == 'D') | (mydata['DOCUMENTED'] == 'ND')
is_timely = (mydata['TIMELY'] == 'Y') | (mydata['TIMELY'] == 'N')
is_legible = (mydata['LEGIBLE'] == 'Y') | (mydata['LEGIBLE'] == 'N')
is_complete = (mydata['COMPLETE'] == 'Y') | (mydata['COMPLETE'] == 'N')
is_met = (mydata['MET'] == 'M') | (mydata['MET'] == 'NM')

#Filtered Dataframes
documentedRM = mydata[is_documented]
timelyRM = mydata[is_timely]
legibleRM = mydata[is_legible]
completeRM = mydata[is_complete]
metRM = mydata[is_met]

#Scores vs Documents
documented = documentedRM.groupby('DOCUMENTS')['DOCUMENTED'].value_counts(normalize=True).mul(100).round(2).sort_values(ascending=False).astype('str') + "%"
Documented_Scores = documented.to_frame()

timely = timelyRM.groupby('DOCUMENTS')['TIMELY'].value_counts(normalize=True).mul(100).round(2).sort_values(ascending=False).astype('str') + "%"
Timeliness_Scores = timely.to_frame()

legible = legibleRM.groupby('DOCUMENTS')['LEGIBLE'].value_counts(normalize=True).mul(100).round(2).sort_values(ascending=False).astype('str') + "%"
Legibility_Scores = legible.to_frame()

complete = completeRM.groupby('DOCUMENTS')['COMPLETE'].value_counts(normalize=True).mul(100).round(2).sort_values(ascending=False).astype('str') + "%"
Completeness_Scores = complete.to_frame()

met = metRM.groupby('DOCUMENTS')['MET'].value_counts(normalize=True).mul(100).round(2).sort_values(ascending=False).astype('str') + "%"
Met_Scores = met.to_frame()

#Results
#Closed Charts Data for the Physiotherapy Department:
print('DOCUMENTED SCORES RM')
print(documentedRM['DOCUMENTED'].value_counts(normalize=True).mul(100).round(2).astype(str) + '%')
print('')
print('TIMELINESS SCORES RM')
print(timelyRM['TIMELY'].value_counts(normalize=True).mul(100).round(2).astype(str) + '%')
print('')
print('LEGIBILITY SCORES RM')
print(legibleRM['LEGIBLE'].value_counts(normalize=True).mul(100).round(2).astype(str) + '%')
print('')
print('COMPLETENESS SCORES RM')
print(completeRM['COMPLETE'].value_counts(normalize=True).mul(100).round(2).astype(str) + '%')
print('')
print('OVERALL COMPLIANCE SCORES RM')
print(metRM['MET'].value_counts(normalize=True).mul(100).round(2).astype(str) + '%')
print('')

print('Summary per Parameter')

print(Documented_Scores)
print('')

print(Timeliness_Scores)
print('')

print(Legibility_Scores)
print('')

print(Completeness_Scores)
print('')

print(Met_Scores)
print('')

#Physicians - Individual Scores
print("Physician Individual scores")
print(documentedRM.groupby('DOCTOR')['DOCUMENTED'].value_counts(normalize=True).mul(100).round(2).astype('str') + "%")
print("")
print(timelyRM.groupby('DOCTOR')['TIMELY'].value_counts(normalize=True).mul(100).round(2).astype('str') + "%")
print("")
print(legibleRM.groupby('DOCTOR')['LEGIBLE'].value_counts(normalize=True).mul(100).round(2).astype('str') + "%")
print("")
print(completeRM.groupby('DOCTOR')['COMPLETE'].value_counts(normalize=True).mul(100).round(2).astype('str') + "%")
print("")
print(metRM.groupby('DOCTOR')['MET'].value_counts(normalize=True).mul(100).round(2).astype('str') + "%")

print("END OF PHYSICIAN SCORES")
